import random

MOD = 10**9 + 7

def countRecognizedStrings(R, L):
    # üß† Fun√ß√£o que calcula quantas strings de tamanho L s√£o reconhecidas por R
    from functools import lru_cache

    @lru_cache(maxsize=None)
    def dp(expr, length):
        if expr == "":
            return 1 if length == 0 else 0
        if expr == "a" or expr == "b":
            return 1 if length == 1 else 0
        if expr.endswith("*"):
            base = expr[:-1]
            total = 0
            for i in range(length + 1):
                total = (total + dp(base, i)) % MOD
            return total
        if "|" in expr:
            left, right = split_union(expr)
            return (dp(left, length) + dp(right, length)) % MOD
        if expr.startswith("(") and expr.endswith(")"):
            expr = expr[1:-1]
        total = 0
        for i in range(length + 1):
            for j in range(1, len(expr)):
                left = expr[:j]
                right = expr[j:]
                total = (total + dp(left, i) * dp(right, length - i)) % MOD
        return total

    def split_union(expr):
        depth = 0
        for i, c in enumerate(expr):
            if c == '(':
                depth += 1
            elif c == ')':
                depth -= 1
            elif c == '|' and depth == 0:
                return expr[:i], expr[i+1:]
        return expr, ""

    return dp(R, L)

def gerar_expressao():
    # Simples gerador de express√µes balanceadas
    bases = ["a", "b"]
    exp = random.choice(bases)
    for _ in range(random.randint(1, 3)):
        op = random.choice(["|", "", "*"])
        if op == "":
            exp = f"({exp}{random.choice(bases)})"
        elif op == "|":
            exp = f"({exp}|{random.choice(bases)})"
        elif op == "*":
            exp = f"({exp}*)"
    return exp

def main():
    T = int(input("Digite o n√∫mero de casos de teste: "))
    casos = []
    for _ in range(T):
        R = input("Digite a express√£o regular: ")
        L = int(input("Digite o tamanho das strings: "))
        casos.append((R, L))
    for R, L in casos:
        print(f"Express√£o: {R}, Tamanho: {L}")
        resultado = countRecognizedStrings(R, L)
        print("Reconhecidas:", resultado)

if __name__ == '__main__':
    main()
