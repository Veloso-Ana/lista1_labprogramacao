def countRecognizedStrings(R, L):
    from functools import lru_cache

    def remove_outer_parentheses(expr):
        while expr.startswith("(") and expr.endswith(")"):
            depth = 0
            balanced = True
            for i in range(len(expr)):
                if expr[i] == "(":
                    depth += 1
                elif expr[i] == ")":
                    depth -= 1
                if depth == 0 and i != len(expr) - 1:
                    balanced = False
                    break
            if balanced:
                expr = expr[1:-1]
            else:
                break
        return expr

    def split_union(expr):
        depth = 0
        for i, c in enumerate(expr):
            if c == '(':
                depth += 1
            elif c == ')':
                depth -= 1
            elif c == '|' and depth == 0:
                return expr[:i], expr[i+1:]
        return expr, ""

    @lru_cache(maxsize=None)
    def dp(expr, length):
        expr = remove_outer_parentheses(expr)

        if expr == "":
            return 1 if length == 0 else 0
        if expr == "a" or expr == "b":
            return 1 if length == 1 else 0
        if expr.endswith("*"):
            base = expr[:-1]
            total = 0
            for i in range(length + 1):
                total += dp(base, i)
            return total
        if "|" in expr:
            left, right = split_union(expr)
            return dp(left, length) + dp(right, length)

        total = 0
        for i in range(1, len(expr)):
            left = expr[:i]
            right = expr[i:]
            for l in range(length + 1):
                total += dp(left, l) * dp(right, length - l)
        return total

    return dp(R, L)

def main():
    T = int(input("Digite o número de casos de teste: "))
    for _ in range(T):
        R = input("Digite a expressão regular: ")
        L = int(input("Digite o tamanho das strings: "))
        print(countRecognizedStrings(R, L))

if __name__ == '__main__':
    main()
