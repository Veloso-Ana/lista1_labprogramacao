import random

def resolver_labirinto(n, m, k, maze, tunnels):
    mapa_tuneis = {}
    for i1, j1, i2, j2 in tunnels:
        mapa_tuneis[(i1, j1)] = (i2, j2)
        mapa_tuneis[(i2, j2)] = (i1, j1)

    for i in range(n):
        for j in range(m):
            if maze[i][j] == 'A':
                inicio = (i, j)

    direcoes = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    def movimentos_validos(x, y):
        vizinhos = []
        for dx, dy in direcoes:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] != '#':
                vizinhos.append((nx, ny))
        return vizinhos

    def simular():
        visitados = set()
        stack = [(inicio, 1.0)]
        prob_escape = 0.0

        while stack:
            (x, y), prob = stack.pop()
            if (x, y) in visitados:
                continue
            visitados.add((x, y))

            if maze[x][y] == '*':
                continue
            if maze[x][y] == '%':
                prob_escape += prob
                continue

            if (x, y) in mapa_tuneis:
                x, y = mapa_tuneis[(x, y)]

            vizinhos = movimentos_validos(x, y)
            if not vizinhos:
                continue

            prob_dividida = prob / len(vizinhos)
            for nx, ny in vizinhos:
                stack.append(((nx, ny), prob_dividida))

        return prob_escape

    return simular()

def gerar_labirinto(n, m):
    elementos = ['O'] * 5 + ['#', '*', '%']
    labirinto = [''.join(random.choice(elementos) for _ in range(m)) for _ in range(n)]
    i, j = random.randint(0, n-1), random.randint(0, m-1)
    linha = list(labirinto[i])
    linha[j] = 'A'
    labirinto[i] = ''.join(linha)
    return labirinto

def gerar_tuneis(k, n, m):
    tuneis = set()
    while len(tuneis) < k:
        i1, j1 = random.randint(0, n-1), random.randint(0, m-1)
        i2, j2 = random.randint(0, n-1), random.randint(0, m-1)
        if (i1 != i2 or j1 != j2):
            tuneis.add((i1, j1, i2, j2))
    return list(tuneis)

def main():
    n, m, k = 5, 6, 2
    maze = gerar_labirinto(n, m)
    tunnels = gerar_tuneis(k, n, m)
    print("Maze:")
    for linha in maze:
        print(linha)
    print("Tunnels:", tunnels)
    resultado = resolver_labirinto(n, m, k, maze, tunnels)
    print("Probabilidade de fuga:", resultado)

if __name__ == '__main__':
    main()
